#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 03, 2018 04:20:12 PM +0200  platform: Windows NT
import sys
import Creat_Right_Tri
import Creat_Isos_Tri
import Creat_Equ_tri
import Creat_Square
import Creat_Rectangle
import Creat_Parallelogra
import Create_Circle
import Create_Ellipse
import Creat_poly
from Right_Triangle import *
from Isosceles_tri import *
from Square import *
from Equilateral_Triangle import *
from Rectangle import *
from Parallelogram import *
from Circle import *
from Ellipse import *

path_to_tool = sys.argv[0].split("/")
path_to_tool.pop()
temp = ""
for word in path_to_tool:
    temp += word + "/"
path_to_tool = temp[:-1]
path_to_tool += "/" + "data.txt"
DATABASE = path_to_tool

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def click(root, data, canvas, shape):
    """
    operationg when the user double clicked on a shape
    the function finds the shape kind and open the mode
    mode (the change shape mode) for the shape
    ;root: the screens foot
    ;data: the data base
    ;canvas: the canvas to paint on
    shape: the choosed shape by the user
    """
    obj = data.get_obj(shape[0])
    if type(obj[0]) is Right_Tri:
        Creat_Right_Tri.create_Creat_Right_Teiangle(root, data, canvas, shape[0])
    elif type(obj[0]) is Isosceles_Tri:
        Creat_Isos_Tri.create_Creat_Isosceles_Triangle(root, data, canvas, shape[0])
    elif type(obj[0]) is Square:
        Creat_Square.create_Creat_Square(root, data, canvas, shape[0])
    elif type(obj[0]) is Equilateral_Triangle:
        Creat_Equ_tri.create_Creat_Equilateral_Tri(root, data, canvas, shape[0])
    elif type(obj[0]) is Rectangle:
        Creat_Rectangle.create_Creat_Rectangle(root, data, canvas, shape[0])
    elif type(obj[0]) is Parallelogram:
        Creat_Rectangle.create_Creat_Rectangle(root, data, canvas, shape[0])
    elif type(obj[0]) is Circle:
        Create_Circle.create_Creat_Circle(root, data, canvas, shape[0])
    elif type(obj[0]) is Ellipse:
        Create_Ellipse.create_Creat_Ellipse(root, data, canvas, shape[0])
    sys.stdout.flush()

def creat_circle(root, data, canvas):
    """
    open the create circle screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Create_Circle.create_Creat_Circle(root, data, canvas)
    print('Main_GUI_support.creat_circle')
    sys.stdout.flush()


def creat_ellipse(root, data, canvas):
    """
    open the create ellipse screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Create_Ellipse.create_Creat_Ellipse(root, data, canvas)
    print('Main_GUI_support.creat_ellipse')
    sys.stdout.flush()


def creat_equilateral_triangle(root, data, canvas):
    """
    open the create Equilateral Triangle screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_Equ_tri.create_Creat_Equilateral_Tri(root, data,canvas)
    print('Main_GUI_support.creat_equilateral_triangle')
    sys.stdout.flush()


def creat_isos_tri(root, data, canvas):
    """
    open the create Isosceles Triangle screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_Isos_Tri.create_Creat_Isosceles_Triangle(root, data, canvas)
    print('Main_GUI_support.creat_isos_tri')
    sys.stdout.flush()


def creat_parallelogram(root, data, canvas):
    """
    open the create Parallelogram screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_Parallelogra.create_Create_Parallelogram(root, data, canvas)
    print('Main_GUI_support.creat_parallelogram')
    sys.stdout.flush()


def creat_rectangle(root, data, canvas):
    """
    open the create Rectangle screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_Rectangle.create_Creat_Rectangle(root, data, canvas)
    print('Main_GUI_support.creat_rectangle')
    sys.stdout.flush()


def creat_right_tri(root, data, canvas):
    """
    open the create Right triangle screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_Right_Tri.create_Creat_Right_Teiangle(root, data, canvas)
    print('Main_GUI_support.creat_right_tri')
    sys.stdout.flush()

def creat_square(root, data, canvas):
    """
    open the create square screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_Square.create_Creat_Square(root, data, canvas)
    print('Main_GUI_support.creat_square')
    sys.stdout.flush()

def creat_poligon(root, data, canvas):
    """
    open the create polygon screen for the user
    ;root: the screens root
    ;data: the database
    ;canvas: the canvas to paint on
    """
    Creat_poly.create_Create_Polygon_(root, data, canvas)
    print('Main_GUI_support.creat_poligon')
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import Main_GUI
    Main_GUI.vp_start_gui()


