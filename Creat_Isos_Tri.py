#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 02, 2018 06:47:09 PM +0200  platform: Windows NT

import sys
path_to_tool = sys.argv[0].split("/")
path_to_tool.pop()
temp = ""
for word in path_to_tool:
    temp += word + "/"
path_to_tool = temp[:-1]
from Isosceles_tri import *

DATABASE = path_to_tool + "/" + "data.txt"

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Creat_Isos_Tri_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Creat_Isosceles_Triangle (root)
    Creat_Isos_Tri_support.init(root, top)
    root.mainloop()

w = None
def create_Creat_Isosceles_Triangle(root, data_obj, canvas, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Creat_Isosceles_Triangle (data_obj, canvas, w)
    Creat_Isos_Tri_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Creat_Isosceles_Triangle():
    global w
    w.destroy()
    w = None


class Creat_Isosceles_Triangle:
    def __init__(self, data_obj, canvas, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("325x226+673+153")
        top.title("Creat Isosceles Triangle")
        top.configure(background="#d9d9d9")


        self.data = data_obj
        self.canv = canvas


        self.txt_isosceles_triangle = Label(top)
        self.txt_isosceles_triangle.place(relx=0.062, rely=0.044, height=21
                , width=129)
        self.txt_isosceles_triangle.configure(background="#d9d9d9")
        self.txt_isosceles_triangle.configure(disabledforeground="#a3a3a3")
        self.txt_isosceles_triangle.configure(foreground="#000000")
        self.txt_isosceles_triangle.configure(text='''Creat Isosceles Triangle''')

        self.txt_side = Label(top)
        self.txt_side.place(relx=0.031, rely=0.31, height=21, width=39)
        self.txt_side.configure(background="#d9d9d9")
        self.txt_side.configure(disabledforeground="#a3a3a3")
        self.txt_side.configure(foreground="#000000")
        self.txt_side.configure(text='''Side -''')
        self.txt_side.configure(width=39)

        self.txt_base = Label(top)
        self.txt_base.place(relx=0.031, rely=0.442, height=21, width=41)
        self.txt_base.configure(background="#d9d9d9")
        self.txt_base.configure(disabledforeground="#a3a3a3")
        self.txt_base.configure(foreground="#000000")
        self.txt_base.configure(text='''Base -''')
        self.txt_base.configure(width=41)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.031, rely=0.575, height=21, width=77)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Start Point (x)''')
        self.Label4.configure(width=77)

        self.Label5 = Label(top)
        self.Label5.place(relx=0.031, rely=0.708, height=21, width=78)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Start Point (y)''')

        self.Label6 = Label(top)
        self.Label6.place(relx=0.031, rely=0.841, height=21, width=64)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Color  ----''')

        self.side = Entry(top)
        self.side.place(relx=0.277, rely=0.31,height=20, relwidth=0.197)
        self.side.configure(background="white")
        self.side.configure(disabledforeground="#a3a3a3")
        self.side.configure(font=font10)
        self.side.configure(foreground="#000000")
        self.side.configure(insertbackground="black")
        self.side.configure(width=64)

        self.base = Entry(top)
        self.base.place(relx=0.277, rely=0.442,height=20, relwidth=0.197)
        self.base.configure(background="white")
        self.base.configure(disabledforeground="#a3a3a3")
        self.base.configure(font=font10)
        self.base.configure(foreground="#000000")
        self.base.configure(insertbackground="black")
        self.base.configure(width=64)

        self.x_start = Entry(top)
        self.x_start.place(relx=0.277, rely=0.575,height=20, relwidth=0.197)
        self.x_start.configure(background="white")
        self.x_start.configure(disabledforeground="#a3a3a3")
        self.x_start.configure(font=font10)
        self.x_start.configure(foreground="#000000")
        self.x_start.configure(insertbackground="black")
        self.x_start.configure(width=64)

        self.y_start = Entry(top)
        self.y_start.place(relx=0.277, rely=0.708,height=20, relwidth=0.197)
        self.y_start.configure(background="white")
        self.y_start.configure(disabledforeground="#a3a3a3")
        self.y_start.configure(font=font10)
        self.y_start.configure(foreground="#000000")
        self.y_start.configure(insertbackground="black")
        self.y_start.configure(width=64)

        self.color = Entry(top)
        self.color.place(relx=0.277, rely=0.841,height=20, relwidth=0.197)
        self.color.configure(background="white")
        self.color.configure(disabledforeground="#a3a3a3")
        self.color.configure(font=font10)
        self.color.configure(foreground="#000000")
        self.color.configure(insertbackground="black")
        self.color.configure(width=64)

        self.creat = Button(top)
        self.creat.place(relx=0.492, rely=0.177, height=164, width=157)
        self.creat.configure(activebackground="#d9d9d9")
        self.creat.configure(activeforeground="#000000")
        self.creat.configure(background="#d9d9d9")
        self.creat.configure(disabledforeground="#a3a3a3")
        self.creat.configure(foreground="#000000")
        self.creat.configure(highlightbackground="#d9d9d9")
        self.creat.configure(highlightcolor="black")
        self.creat.configure(pady="0")
        self.creat.configure(text='''Creat''')
        self.creat.configure(width=157)
        self.creat.bind('<Button-1>',lambda e:self.button_pres())

        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.name = Entry(top)
        self.name.place(relx=0.277, rely=0.177,height=20, relwidth=0.197)
        self.name.configure(background="white")
        self.name.configure(disabledforeground="#a3a3a3")
        self.name.configure(font=font10)
        self.name.configure(foreground="#000000")
        self.name.configure(insertbackground="black")
        self.name.configure(width=64)

        self.txt_name = Label(top)
        self.txt_name.place(relx=0.031, rely=0.177, height=21, width=59)
        self.txt_name.configure(background="#d9d9d9")
        self.txt_name.configure(disabledforeground="#a3a3a3")
        self.txt_name.configure(foreground="#000000")
        self.txt_name.configure(text='''Name ---''')

    def button_pres(self):
        x = self.x_start.get()
        y = self.y_start.get()
        side = self.side.get()
        base = self.base.get()
        color = self.color.get()
        name = self.name.get()
        print self.data.show()
        if x.isdigit() and y.isdigit() and side.isdigit() and base.isdigit() and color is not "" and color is not "" and self.can_be_isos(int(base), int(side)):
            obj = Isosceles_Tri(int(x), int(y), int(base), int(side), color)
            obj_val = obj.draw_me(self.canv)
            print self.canv.coords(obj_val)
            self.data.set_value(name, obj_val)
            value ="Name:  " + name + ":   " + "x: " + x + "   " + "y: " + y + "   " + "side: " + side + "   " + "base: " + base + "   " + "color: " + color + "\n"
            with open(DATABASE, "a") as file:
                file.write(value)
            destroy_Creat_Isosceles_Triangle()

    def can_be_isos(self, base, side):
        side1 = side + 0.0
        base1 = base + 0.0
        is_isos = False
        try:
            temp = math.sin(math.acos((base1/2) / side1))*side1
            if temp != 0:
                is_isos = True
        except:
            print "Wrong values"
        finally:
            return is_isos






if __name__ == '__main__':
    vp_start_gui()



