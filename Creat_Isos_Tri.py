#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 02, 2018 06:47:09 PM +0200  platform: Windows NT

import sys
path_to_tool = sys.argv[0].split("/")
path_to_tool.pop()
temp = ""
for word in path_to_tool:
    temp += word + "/"
path_to_tool = temp[:-1]
from Isosceles_tri import *
COLORS=['snow', 'ghost white', 'white smoke', 'gainsboro', 'floral white', 'old lace',
'linen', 'antique white', 'papaya whip', 'blanched almond', 'bisque', 'peach puff',
'navajo white', 'lemon chiffon', 'mint cream', 'azure', 'alice blue', 'lavender',
'lavender blush', 'misty rose', 'dark slate gray', 'dim gray', 'slate gray',
'light slate gray', 'gray', 'light grey', 'midnight blue', 'navy', 'cornflower blue', 'dark slate blue',
'slate blue', 'medium slate blue', 'light slate blue', 'medium blue', 'royal blue',  'blue',
'dodger blue', 'deep sky blue', 'sky blue', 'light sky blue', 'steel blue', 'light steel blue',
'light blue', 'powder blue', 'pale turquoise', 'dark turquoise', 'medium turquoise', 'turquoise',
'cyan', 'light cyan', 'cadet blue', 'medium aquamarine', 'aquamarine', 'dark green', 'dark olive green',
'dark sea green', 'sea green', 'medium sea green', 'light sea green', 'pale green', 'spring green',
'lawn green', 'medium spring green', 'green yellow', 'lime green', 'yellow green',
'forest green', 'olive drab', 'dark khaki', 'khaki', 'pale goldenrod', 'light goldenrod yellow',
'light yellow', 'yellow', 'gold', 'light goldenrod', 'goldenrod', 'dark goldenrod', 'rosy brown',
'indian red', 'saddle brown', 'sandy brown',
'dark salmon', 'salmon', 'light salmon', 'orange', 'dark orange',
'coral', 'light coral', 'tomato', 'orange red', 'red', 'hot pink', 'deep pink', 'pink', 'light pink',
'pale violet red', 'maroon', 'medium violet red', 'violet red',
'medium orchid', 'dark orchid', 'dark violet', 'blue violet', 'purple', 'medium purple',
'thistle', 'snow2', 'snow3',
'snow4', 'seashell2', 'seashell3', 'seashell4', 'AntiqueWhite1', 'AntiqueWhite2',
'AntiqueWhite3', 'AntiqueWhite4', 'bisque2', 'bisque3', 'bisque4', 'PeachPuff2',
'PeachPuff3', 'PeachPuff4', 'NavajoWhite2', 'NavajoWhite3', 'NavajoWhite4',
'LemonChiffon2', 'LemonChiffon3', 'LemonChiffon4', 'cornsilk2', 'cornsilk3',
'cornsilk4', 'ivory2', 'ivory3', 'ivory4', 'honeydew2', 'honeydew3', 'honeydew4',
'LavenderBlush2', 'LavenderBlush3', 'LavenderBlush4', 'MistyRose2', 'MistyRose3',
'MistyRose4', 'azure2', 'azure3', 'azure4', 'SlateBlue1', 'SlateBlue2', 'SlateBlue3',
'SlateBlue4', 'RoyalBlue1', 'RoyalBlue2', 'RoyalBlue3', 'RoyalBlue4', 'blue2', 'blue4',
'DodgerBlue2', 'DodgerBlue3', 'DodgerBlue4', 'SteelBlue1', 'SteelBlue2',
'SteelBlue3', 'SteelBlue4', 'DeepSkyBlue2', 'DeepSkyBlue3', 'DeepSkyBlue4',
'SkyBlue1', 'SkyBlue2', 'SkyBlue3', 'SkyBlue4', 'LightSkyBlue1', 'LightSkyBlue2',
'LightSkyBlue3', 'LightSkyBlue4', 'SlateGray1', 'SlateGray2', 'SlateGray3',
'SlateGray4', 'LightSteelBlue1', 'LightSteelBlue2', 'LightSteelBlue3',
'LightSteelBlue4', 'LightBlue1', 'LightBlue2', 'LightBlue3', 'LightBlue4',
'LightCyan2', 'LightCyan3', 'LightCyan4', 'PaleTurquoise1', 'PaleTurquoise2',
'PaleTurquoise3', 'PaleTurquoise4', 'CadetBlue1', 'CadetBlue2', 'CadetBlue3',
'CadetBlue4', 'turquoise1', 'turquoise2', 'turquoise3', 'turquoise4', 'cyan2', 'cyan3',
'cyan4', 'DarkSlateGray1', 'DarkSlateGray2', 'DarkSlateGray3', 'DarkSlateGray4',
'aquamarine2', 'aquamarine4', 'DarkSeaGreen1', 'DarkSeaGreen2', 'DarkSeaGreen3',
'DarkSeaGreen4', 'SeaGreen1', 'SeaGreen2', 'SeaGreen3', 'PaleGreen1', 'PaleGreen2',
'PaleGreen3', 'PaleGreen4', 'SpringGreen2', 'SpringGreen3', 'SpringGreen4',
'green2', 'green3', 'green4', 'chartreuse2', 'chartreuse3', 'chartreuse4',
'OliveDrab1', 'OliveDrab2', 'OliveDrab4', 'DarkOliveGreen1', 'DarkOliveGreen2',
'DarkOliveGreen3', 'DarkOliveGreen4', 'khaki1', 'khaki2', 'khaki3', 'khaki4',
'LightGoldenrod1', 'LightGoldenrod2', 'LightGoldenrod3', 'LightGoldenrod4',
'LightYellow2', 'LightYellow3', 'LightYellow4', 'yellow2', 'yellow3', 'yellow4',
'gold2', 'gold3', 'gold4', 'goldenrod1', 'goldenrod2', 'goldenrod3', 'goldenrod4',
'DarkGoldenrod1', 'DarkGoldenrod2', 'DarkGoldenrod3', 'DarkGoldenrod4',
'RosyBrown1', 'RosyBrown2', 'RosyBrown3', 'RosyBrown4', 'IndianRed1', 'IndianRed2',
'IndianRed3', 'IndianRed4', 'sienna1', 'sienna2', 'sienna3', 'sienna4', 'burlywood1',
'burlywood2', 'burlywood3', 'burlywood4', 'wheat1', 'wheat2', 'wheat3', 'wheat4', 'tan1',
'tan2', 'tan4', 'chocolate1', 'chocolate2', 'chocolate3', 'firebrick1', 'firebrick2',
'firebrick3', 'firebrick4', 'brown1', 'brown2', 'brown3', 'brown4', 'salmon1', 'salmon2',
'salmon3', 'salmon4', 'LightSalmon2', 'LightSalmon3', 'LightSalmon4', 'orange2',
'orange3', 'orange4', 'DarkOrange1', 'DarkOrange2', 'DarkOrange3', 'DarkOrange4',
'coral1', 'coral2', 'coral3', 'coral4', 'tomato2', 'tomato3', 'tomato4', 'OrangeRed2',
'OrangeRed3', 'OrangeRed4', 'red2', 'red3', 'red4', 'DeepPink2', 'DeepPink3', 'DeepPink4',
'HotPink1', 'HotPink2', 'HotPink3', 'HotPink4', 'pink1', 'pink2', 'pink3', 'pink4',
'LightPink1', 'LightPink2', 'LightPink3', 'LightPink4', 'PaleVioletRed1',
'PaleVioletRed2', 'PaleVioletRed3', 'PaleVioletRed4', 'maroon1', 'maroon2',
'maroon3', 'maroon4', 'VioletRed1', 'VioletRed2', 'VioletRed3', 'VioletRed4',
'magenta2', 'magenta3', 'magenta4', 'orchid1', 'orchid2', 'orchid3', 'orchid4', 'plum1',
'plum2', 'plum3', 'plum4', 'MediumOrchid1', 'MediumOrchid2', 'MediumOrchid3',
'MediumOrchid4', 'DarkOrchid1', 'DarkOrchid2', 'DarkOrchid3', 'DarkOrchid4',
'purple1', 'purple2', 'purple3', 'purple4', 'MediumPurple1', 'MediumPurple2',
'MediumPurple3', 'MediumPurple4', 'thistle1', 'thistle2', 'thistle3', 'thistle4',
'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8', 'gray9', 'gray10',
'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17', 'gray18', 'gray19',
'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26', 'gray27', 'gray28',
'gray29', 'gray30', 'gray31', 'gray32', 'gray33', 'gray34', 'gray35', 'gray36', 'gray37',
'gray38', 'gray39', 'gray40', 'gray42', 'gray43', 'gray44', 'gray45', 'gray46', 'gray47',
'gray48', 'gray49', 'gray50', 'gray51', 'gray52', 'gray53', 'gray54', 'gray55', 'gray56',
'gray57', 'gray58', 'gray59', 'gray60', 'gray61', 'gray62', 'gray63', 'gray64', 'gray65',
'gray66', 'gray67', 'gray68', 'gray69', 'gray70', 'gray71', 'gray72', 'gray73', 'gray74',
'gray75', 'gray76', 'gray77', 'gray78', 'gray79', 'gray80', 'gray81', 'gray82', 'gray83',
'gray84', 'gray85', 'gray86', 'gray87', 'gray88', 'gray89', 'gray90', 'gray91', 'gray92',
'gray93', 'gray94', 'gray95', 'gray97', 'gray98', 'gray99']
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Creat_Isos_Tri_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Creat_Isosceles_Triangle (root)
    Creat_Isos_Tri_support.init(root, top)
    root.mainloop()

w = None
def create_Creat_Isosceles_Triangle(root, data_obj, canvas, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Creat_Isosceles_Triangle (data_obj, canvas, w)
    Creat_Isos_Tri_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Creat_Isosceles_Triangle():
    global w
    w.destroy()
    w = None


class Creat_Isosceles_Triangle:
    def __init__(self, data_obj, canvas, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("325x226+673+153")
        top.title("Creat Isosceles Triangle")
        top.configure(background="#d9d9d9")


        self.data = data_obj
        self.canv = canvas


        self.txt_isosceles_triangle = Label(top)
        self.txt_isosceles_triangle.place(relx=0.062, rely=0.044, height=21
                , width=129)
        self.txt_isosceles_triangle.configure(background="#d9d9d9")
        self.txt_isosceles_triangle.configure(disabledforeground="#a3a3a3")
        self.txt_isosceles_triangle.configure(foreground="#000000")
        self.txt_isosceles_triangle.configure(text='''Creat Isosceles Triangle''')

        self.txt_side = Label(top)
        self.txt_side.place(relx=0.031, rely=0.31, height=21, width=39)
        self.txt_side.configure(background="#d9d9d9")
        self.txt_side.configure(disabledforeground="#a3a3a3")
        self.txt_side.configure(foreground="#000000")
        self.txt_side.configure(text='''Side -''')
        self.txt_side.configure(width=39)

        self.txt_base = Label(top)
        self.txt_base.place(relx=0.031, rely=0.442, height=21, width=41)
        self.txt_base.configure(background="#d9d9d9")
        self.txt_base.configure(disabledforeground="#a3a3a3")
        self.txt_base.configure(foreground="#000000")
        self.txt_base.configure(text='''Base -''')
        self.txt_base.configure(width=41)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.031, rely=0.575, height=21, width=77)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Start Point (x)''')
        self.Label4.configure(width=77)

        self.Label5 = Label(top)
        self.Label5.place(relx=0.031, rely=0.708, height=21, width=78)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Start Point (y)''')

        self.Label6 = Label(top)
        self.Label6.place(relx=0.031, rely=0.841, height=21, width=64)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Color  ----''')

        self.side = Entry(top)
        self.side.place(relx=0.277, rely=0.31,height=20, relwidth=0.197)
        self.side.configure(background="white")
        self.side.configure(disabledforeground="#a3a3a3")
        self.side.configure(font=font10)
        self.side.configure(foreground="#000000")
        self.side.configure(insertbackground="black")
        self.side.configure(width=64)

        self.base = Entry(top)
        self.base.place(relx=0.277, rely=0.442,height=20, relwidth=0.197)
        self.base.configure(background="white")
        self.base.configure(disabledforeground="#a3a3a3")
        self.base.configure(font=font10)
        self.base.configure(foreground="#000000")
        self.base.configure(insertbackground="black")
        self.base.configure(width=64)

        self.x_start = Entry(top)
        self.x_start.place(relx=0.277, rely=0.575,height=20, relwidth=0.197)
        self.x_start.configure(background="white")
        self.x_start.configure(disabledforeground="#a3a3a3")
        self.x_start.configure(font=font10)
        self.x_start.configure(foreground="#000000")
        self.x_start.configure(insertbackground="black")
        self.x_start.configure(width=64)

        self.y_start = Entry(top)
        self.y_start.place(relx=0.277, rely=0.708,height=20, relwidth=0.197)
        self.y_start.configure(background="white")
        self.y_start.configure(disabledforeground="#a3a3a3")
        self.y_start.configure(font=font10)
        self.y_start.configure(foreground="#000000")
        self.y_start.configure(insertbackground="black")
        self.y_start.configure(width=64)

        self.color = Entry(top)
        self.color.place(relx=0.277, rely=0.841,height=20, relwidth=0.197)
        self.color.configure(background="white")
        self.color.configure(disabledforeground="#a3a3a3")
        self.color.configure(font=font10)
        self.color.configure(foreground="#000000")
        self.color.configure(insertbackground="black")
        self.color.configure(width=64)

        self.creat = Button(top)
        self.creat.place(relx=0.492, rely=0.177, height=164, width=157)
        self.creat.configure(activebackground="#d9d9d9")
        self.creat.configure(activeforeground="#000000")
        self.creat.configure(background="#d9d9d9")
        self.creat.configure(disabledforeground="#a3a3a3")
        self.creat.configure(foreground="#000000")
        self.creat.configure(highlightbackground="#d9d9d9")
        self.creat.configure(highlightcolor="black")
        self.creat.configure(pady="0")
        self.creat.configure(text='''Creat''')
        self.creat.configure(width=157)
        self.creat.bind('<Button-1>',lambda e:self.button_pres())


        self.txt_name = Label(top)
        self.txt_name.place(relx=0.031, rely=0.177, height=21, width=59)
        self.txt_name.configure(background="#d9d9d9")
        self.txt_name.configure(disabledforeground="#a3a3a3")
        self.txt_name.configure(foreground="#000000")


        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)


    def button_pres(self):
        x = self.x_start.get()
        y = self.y_start.get()
        side = self.side.get()
        base = self.base.get()
        color = self.color.get()
        if x.isdigit() and y.isdigit() and side.isdigit() and base.isdigit() and color is not "" and color is not "" and self.can_be_isos(int(base), int(side)) and color in COLORS:
            obj = [Isosceles_Tri(int(x), int(y), int(base), int(side), color),[int(x), int(y), int(base), int(side), color]]
            obj_val = obj[0].draw_me(self.canv)
            self.data.set_value(obj_val, obj)
            destroy_Creat_Isosceles_Triangle()

    def can_be_isos(self, base, side):
        side1 = side + 0.0
        base1 = base + 0.0
        is_isos = False
        try:
            temp = math.sin(math.acos((base1/2) / side1))*side1
            if temp != 0:
                is_isos = True
        except:
            self.txt_name.configure(text='''Wrong values''')
            print "Wrong values"
        finally:
            return is_isos






if __name__ == '__main__':
    vp_start_gui()



