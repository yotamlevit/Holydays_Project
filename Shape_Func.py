#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 09, 2018 03:23:00 PM +0200  platform: Windows NT

import sys
path_to_tool = sys.argv[0].split("/")
path_to_tool.pop()
temp = ""
for word in path_to_tool:
    temp += word + "/"
path_to_tool = temp[:-1]

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Shape_Func_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Shape_Change (root)
    Shape_Func_support.init(root, top)
    root.mainloop()

w = None
def create_Shape_Change(root, data, canvas, shape, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Shape_Change (data, canvas, shape, w)
    Shape_Func_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Shape_Change():
    global w
    w.destroy()
    w = None


class Shape_Change:
    def __init__(self, data, canvas, shape, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("340x385+526+143")
        top.title("Shape Change")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.delete_shape = Button(top)
        self.delete_shape.place(relx=0.5, rely=0.649, height=124, width=147)
        self.delete_shape.configure(activebackground="#d9d9d9")
        self.delete_shape.configure(activeforeground="#000000")
        self.delete_shape.configure(background="#d9d9d9")
        self.delete_shape.configure(disabledforeground="#a3a3a3")
        self.delete_shape.configure(foreground="#000000")
        self.delete_shape.configure(highlightbackground="#d9d9d9")
        self.delete_shape.configure(highlightcolor="black")
        self.delete_shape.configure(pady="0")
        self.delete_shape.configure(text='''Delete Shape''')
        self.delete_shape.bind('<Button-1>',lambda e:Shape_Func_support.delete_shape(canvas, shape, data))

        self.calc_area = Button(top)
        self.calc_area.place(relx=0.029, rely=0.649, height=44, width=147)
        self.calc_area.configure(activebackground="#d9d9d9")
        self.calc_area.configure(activeforeground="#000000")
        self.calc_area.configure(background="#d9d9d9")
        self.calc_area.configure(disabledforeground="#a3a3a3")
        self.calc_area.configure(foreground="#000000")
        self.calc_area.configure(highlightbackground="#d9d9d9")
        self.calc_area.configure(highlightcolor="black")
        self.calc_area.configure(pady="0")
        self.calc_area.configure(text='''Calculate Area''')
        self.calc_area.bind('<Button-1>',lambda e:Shape_Func_support.calc_shape(self.area_is, shape, data))

        self.area_frame = LabelFrame(top)
        self.area_frame.place(relx=0.029, rely=0.779, relheight=0.195
                , relwidth=0.441)
        self.area_frame.configure(relief=GROOVE)
        self.area_frame.configure(foreground="black")
        self.area_frame.configure(text='''Area is:''')
        self.area_frame.configure(background="#d9d9d9")
        self.area_frame.configure(highlightbackground="#d9d9d9")
        self.area_frame.configure(highlightcolor="black")
        self.area_frame.configure(width=150)

        self.area_is = Label(self.area_frame)
        self.area_is.place(relx=0.029, rely=0.4, height=41, width=140
                , bordermode='ignore')
        self.area_is.configure(activebackground="#f9f9f9")
        self.area_is.configure(activeforeground="black")
        self.area_is.configure(background="#d9d9d9")
        self.area_is.configure(disabledforeground="#a3a3a3")
        self.area_is.configure(foreground="#000000")
        self.area_is.configure(highlightbackground="#d9d9d9")
        self.area_is.configure(highlightcolor="black")
        self.area_is.configure(text='''_____''')

        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Label1 = Label(top)
        self.Label1.place(relx=0.441, rely=0.026, height=234, width=172)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self._img1 = PhotoImage(file=path_to_tool + "/Joke.gif")
        self.Label1.configure(image=self._img1)
        self.Label1.configure(text='''Label''')

        self.hide_shape = Button(top)
        self.hide_shape.place(relx=0.059, rely=0.312, height=114, width=117)
        self.hide_shape.configure(activebackground="#d9d9d9")
        self.hide_shape.configure(activeforeground="#000000")
        self.hide_shape.configure(background="#d9d9d9")
        self.hide_shape.configure(disabledforeground="#a3a3a3")
        self.hide_shape.configure(foreground="#000000")
        self.hide_shape.configure(highlightbackground="#d9d9d9")
        self.hide_shape.configure(highlightcolor="black")
        self.hide_shape.configure(pady="0")
        self.hide_shape.configure(text='''Hide Shape''')
        self.hide_shape.configure(width=117)
        self.hide_shape.bind('<Button-1>',lambda e:Shape_Func_support.hide_shape(top, canvas, shape, data))






if __name__ == '__main__':
    vp_start_gui()


